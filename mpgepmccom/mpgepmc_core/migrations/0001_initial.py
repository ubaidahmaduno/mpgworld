# Generated by Django 5.2.5 on 2025-08-15 05:54

import django.core.validators
import django.db.models.deletion
import mpgepmc_core.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_title', models.CharField(max_length=200)),
                ('account_number', models.CharField(max_length=50)),
                ('bank_name', models.CharField(max_length=100)),
                ('iban', models.CharField(max_length=50, verbose_name='IBAN')),
                ('is_active', models.BooleanField(default=True, help_text='Set as the current active account for donations. Only one account should be active at a time.')),
            ],
            options={
                'verbose_name': 'Bank Account',
                'verbose_name_plural': 'Bank Accounts',
            },
        ),
        migrations.CreateModel(
            name='Donation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('donation_order_number', models.CharField(blank=True, max_length=20, unique=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending User Action'), ('AWAITING_VERIFICATION', 'Awaiting Verification'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=30)),
                ('full_name', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254)),
                ('transaction_id', models.CharField(max_length=100, verbose_name='Bank Transaction ID / Reference')),
                ('sender_account_name', models.CharField(blank=True, max_length=150, null=True, verbose_name="Sender's Account Name")),
                ('sender_account_number', models.CharField(blank=True, max_length=50, null=True, verbose_name="Sender's Account Number")),
                ('transaction_slip', models.FileField(help_text='Upload a clear JPG, JPEG, PNG, or PDF of the transaction receipt.', upload_to=mpgepmc_core.models.donation_slip_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'pdf'])], verbose_name='Transaction Slip/Screenshot')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Donation Record',
                'verbose_name_plural': 'Donation Records',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MpgBlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='A unique URL-friendly version of the title.', max_length=250, null=True, unique=True)),
                ('short_summary', models.TextField(help_text='A brief summary of the blog post.', max_length=1500)),
                ('content', models.TextField(help_text='The full content of the blog post (HTML allowed).')),
                ('feature_image', models.ImageField(blank=True, help_text='Upload a feature image for the blog post.', null=True, upload_to=mpgepmc_core.models.mpgblog_image_upload_path)),
                ('posted_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_published', models.BooleanField(default=True, help_text='Set to true to make the blog post live.')),
            ],
            options={
                'verbose_name': 'MPG Blog Post',
                'verbose_name_plural': 'MPG Blog Posts',
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='MpgService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='A unique URL-friendly version of the service name.', max_length=200, null=True, unique=True)),
                ('short_description', models.TextField(blank=True, max_length=500, null=True)),
                ('full_description', models.TextField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, help_text='Upload a feature image for the service (e.g., 800x600 pixels).', null=True, upload_to=mpgepmc_core.models.mpgservice_image_upload_path)),
                ('is_active', models.BooleanField(default=True)),
                ('has_packages_for_purchase', models.BooleanField(default=False, help_text="Check if this service offers distinct packages for direct purchase (e.g., Basic, Premium). If unchecked, only 'Request Service' button will appear.")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'MPG Service',
                'verbose_name_plural': 'MPG Services',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250, unique=True)),
                ('slug', models.SlugField(blank=True, help_text='A unique URL-friendly version of the project title.', max_length=250, null=True, unique=True)),
                ('category', models.CharField(choices=[('AI_EDUCATION', 'AI Education'), ('AI_AWARENESS', 'AI Awareness'), ('HUMAN_WELFARE', 'Human Welfare'), ('DEVELOPMENT', 'Development')], default='HUMAN_WELFARE', help_text='The main category of the project.', max_length=50)),
                ('short_description', models.TextField(help_text='A brief summary of the project for list pages.', max_length=1500)),
                ('full_description', models.TextField(help_text='The full details of the project (HTML is allowed).')),
                ('image', models.ImageField(blank=True, help_text='Upload a feature image for the project.', null=True, upload_to=mpgepmc_core.models.project_image_upload_path)),
                ('posted_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('is_published', models.BooleanField(default=True, help_text='Set to true to make the project visible on the site.')),
            ],
            options={
                'verbose_name': 'Welfare Project',
                'verbose_name_plural': 'Welfare Projects',
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='ServicePackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Basic, Standard, Premium, Enterprise', max_length=100)),
                ('slug', models.SlugField(blank=True, help_text='A unique URL-friendly version of the package name (per service).', max_length=100, null=True)),
                ('description', models.TextField(blank=True, help_text='A short description of this package.', null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price for this package.', max_digits=10)),
                ('duration', models.CharField(blank=True, help_text="e.g., 'Monthly', 'Annually', 'One-time', 'Per Project'", max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this package currently available for purchase?')),
                ('order', models.IntegerField(default=0, help_text='Order in which packages should be displayed.')),
                ('service', models.ForeignKey(help_text='The service this package belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='packages', to='mpgepmc_core.mpgservice')),
            ],
            options={
                'verbose_name': 'Service Package',
                'verbose_name_plural': 'Service Packages',
                'ordering': ['order', 'price'],
                'unique_together': {('service', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='ServiceFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_text', models.TextField(help_text='e.g., 10 GB Storage, Priority Support, Custom Reports (HTML allowed)')),
                ('is_included', models.BooleanField(default=True, help_text='Is this feature included in the package?')),
                ('order', models.IntegerField(default=0, help_text='Order in which features should be displayed.')),
                ('package', models.ForeignKey(help_text='The package this feature belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='features', to='mpgepmc_core.servicepackage')),
            ],
            options={
                'verbose_name': 'Service Feature',
                'verbose_name_plural': 'Service Features',
                'ordering': ['order', 'feature_text'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_full_name', models.CharField(max_length=100)),
                ('user_email', models.EmailField(max_length=254)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('user_message', models.TextField(help_text='Details or specific requirements for the service.')),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('mpgservice', models.ForeignKey(blank=True, help_text='The MPG service being requested.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='mpgepmc_core.mpgservice')),
            ],
            options={
                'verbose_name': 'MPG Service Request',
                'verbose_name_plural': 'MPG Service Requests',
                'ordering': ['-request_date'],
            },
        ),
    ]
